name: Destroy Infrastructure test

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy (dev, stage, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod
      confirmation:
        description: 'Type "DESTROY" to confirm deletion of all resources'
        required: true
        type: string

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: ${{ github.event.inputs.confirmation != 'DESTROY' }}
        run: |
          echo "Confirmation text must be exactly 'DESTROY'. Cancelling operation."
          exit 1
          
  destroy-infrastructure:
    needs: validate-input
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    timeout-minutes: 120  # Add a longer timeout for large destruction jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Force terminate ASG instances first to speed up destruction
      - name: Force terminate ASG instances
        run: |
          echo "ðŸ”¥ Terminating Auto Scaling Group instances manually for faster cleanup"
          
          # Get ASG name
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[?contains(Tags[?Key=='Project'].Value, 'secure-app-infra')].AutoScalingGroupName" \
            --output text)
            
          if [ -n "$ASG_NAME" ]; then
            echo "Found ASG: $ASG_NAME - Setting capacity to 0"
            
            # Set ASG to 0 capacity first to prevent new instances
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name $ASG_NAME \
              --min-size 0 --max-size 0 --desired-capacity 0
              
            # Get instance IDs
            INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-name $ASG_NAME \
              --query "AutoScalingGroups[0].Instances[*].InstanceId" \
              --output text)
              
            if [ -n "$INSTANCE_IDS" ]; then
              echo "Terminating instances: $INSTANCE_IDS"
              # Terminate instances
              aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
              
              # Wait for instances to terminate
              echo "Waiting for instances to terminate..."
              aws ec2 wait instance-terminated --instance-ids $INSTANCE_IDS
            fi
          else
            echo "No ASG found for the project"
          fi

      - name: Create simple Terraform configuration
        run: |
          mkdir -p /tmp/terraform_destroy
          
          cat > /tmp/terraform_destroy/backend.tf << 'EOF'
          terraform {
            required_version = ">= 1.3.0"
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
            
            backend "s3" {
              bucket         = "tf-state-aws-infra01"
              key            = "secure-app-infra/${{ github.event.inputs.environment }}/terraform.tfstate"
              region         = "ap-south-1"
              dynamodb_table = "terraform-lock"
              encrypt        = true
            }
          }
          
          provider "aws" {
            region = "ap-south-1"
          }
          EOF
      
      - name: Destroy all resources using state
        run: |
          echo "ðŸš¨ DESTROYING ALL INFRASTRUCTURE IN ${{ github.event.inputs.environment }} ENVIRONMENT ðŸš¨"
          
          cd /tmp/terraform_destroy
          terraform init
          
          # Get all resources from state
          RESOURCES=$(terraform state list 2>/dev/null || echo "")
          
          if [ -z "$RESOURCES" ]; then
            echo "No resources found in state. Nothing to destroy."
          else
            echo "Found resources in state:"
            echo "$RESOURCES"
            
            # Group resources by type to optimize destruction order
            echo "$RESOURCES" | grep "aws_autoscaling_" > /tmp/asg_resources.txt || true
            echo "$RESOURCES" | grep "aws_lb_" > /tmp/lb_resources.txt || true
            echo "$RESOURCES" | grep -v "aws_autoscaling_" | grep -v "aws_lb_" > /tmp/other_resources.txt || true
            
            # Destroy ASG resources first
            if [ -s /tmp/asg_resources.txt ]; then
              echo "Destroying ASG resources first..."
              cat /tmp/asg_resources.txt | while read RESOURCE; do
                echo "Destroying: $RESOURCE"
                terraform destroy -target="$RESOURCE" -auto-approve || true
              done
            fi
            
            # Then destroy LB resources
            if [ -s /tmp/lb_resources.txt ]; then
              echo "Destroying Load Balancer resources next..."
              cat /tmp/lb_resources.txt | while read RESOURCE; do
                echo "Destroying: $RESOURCE"
                terraform destroy -target="$RESOURCE" -auto-approve || true
              done
            fi
            
            # Finally destroy other resources
            if [ -s /tmp/other_resources.txt ]; then
              echo "Destroying remaining resources..."
              cat /tmp/other_resources.txt | while read RESOURCE; do
                echo "Destroying: $RESOURCE"
                terraform destroy -target="$RESOURCE" -auto-approve || true
              done
            fi
            
            # Final destroy to clean up anything remaining
            terraform destroy -auto-approve || true
          fi
          
      - name: Clean up AWS resources directly if needed
        if: success() || failure()
        run: |
          echo "Performing additional AWS resource cleanup..."
          
          # Delete any orphaned load balancers
          LB_ARNS=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?contains(LoadBalancerName, 'secure-app-infra-${{ github.event.inputs.environment }}')].LoadBalancerArn" \
            --output text)
            
          if [ -n "$LB_ARNS" ]; then
            for LB_ARN in $LB_ARNS; do
              echo "Deleting load balancer: $LB_ARN"
              aws elbv2 delete-load-balancer --load-balancer-arn $LB_ARN
            done
          fi
          
          # Other cleanup commands can be added here as needed
          
      - name: Delete AMIs
        if: success() || failure()
        run: |
          echo "Searching for AMIs with name prefix 'secure-app-infra-'"
          AMI_IDS=$(aws ec2 describe-images --owners self \
            --filters "Name=name,Values=secure-app-infra-*" \
            --query "Images[*].ImageId" --output text)
          
          if [ -n "$AMI_IDS" ]; then
            echo "Found AMIs to delete: $AMI_IDS"
            
            for AMI_ID in $AMI_IDS; do
              echo "Deregistering AMI: $AMI_ID"
              aws ec2 deregister-image --image-id $AMI_ID
              
              # Find and delete associated snapshots
              SNAPSHOTS=$(aws ec2 describe-snapshots \
                --filters "Name=description,Values=*$AMI_ID*" \
                --query "Snapshots[*].SnapshotId" --output text)
                
              if [ -n "$SNAPSHOTS" ]; then
                for SNAPSHOT in $SNAPSHOTS; do
                  echo "Deleting snapshot: $SNAPSHOT"
                  aws ec2 delete-snapshot --snapshot-id $SNAPSHOT
                done
              fi
            done
          else
            echo "No AMIs found to delete"
          fi
